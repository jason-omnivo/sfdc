//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class FolderItems {

	public class Order {
		public String by_Z {get;set;} // in json: by
		public String direction {get;set;} 

		public Order(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'by') {
							by_Z = parser.getText();
						} else if (text == 'direction') {
							direction = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Order consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Entry implements Comparable{
		public String type_Z {get;set;} // in json: type
		public String id {get;set;} 
		public String etag {get;set;} 
		public String name {get;set;} 
		public String description {get;set;} 
		public Integer size {get;set;}
		
		public Integer compareTo(Object compareTo) {
	        
	        Entry compareToEntry = (Entry)compareTo;
	        
	        Integer returnValue = 0;
	        if (this.size < compareToEntry.size) {
	            returnValue = 1;
	        } else if (this.size > compareToEntry.size) {
	            returnValue = -1;
	        }
	        
	        return returnValue;       
    	}
		
		public Entry(String entryType, String id, String etag, String name, String description, Integer size) {
			this.type_Z = entryType;
			this.id = id; 
			this.etag = etag;
			this.name = name; 
			this.description = description;
			this.size = size;
		}
		
		public Entry(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'etag') {
							etag = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'description') {
							description = parser.getText();
						} else if (text == 'size') {
							size = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Entries consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public Integer total_count {get;set;} 
	public List<Entry> entries {get;set;} 
	public Integer offset {get;set;} 
	public Integer limit_x {get;set;} // in json: limit
	public List<Order> order {get;set;} 

	public FolderItems(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'total_count') {
						total_count = parser.getIntegerValue();
					} else if (text == 'entries') {
						entries = arrayOfEntries(parser);
					} else if (text == 'offset') {
						offset = parser.getIntegerValue();
					} else if (text == 'limit') {
						limit_x = parser.getIntegerValue();
					} else if (text == 'order') {
						order = arrayOfOrder(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'FolderItems consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	
	public static FolderItems parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new FolderItems(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	

    private static List<Entry> arrayOfEntries(System.JSONParser p) {
        List<Entry> res = new List<Entry>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Entry(p));
        }
        return res;
    }


    private static List<Order> arrayOfOrder(System.JSONParser p) {
        List<Order> res = new List<Order>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Order(p));
        }
        return res;
    }


}